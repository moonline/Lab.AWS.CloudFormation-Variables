# CF template
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: Custom resource variables example application

Parameters:
  environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - stage
      - prod
    Description: Deployment environment
  powertoolsNameVersion:
    Type: String
    Default: AWSLambdaPowertoolsPythonV2-Arm64:73
    Description: Powertools name and version, e.g. AWSLambdaPowertoolsPythonV2-Arm64:71
  echoUtilityFunctionArn:
    Type: String
    Description: Echo Utility Function ARN

Mappings:
  # Mapping "suffix"
  SuffixMap:
    dev:
      exampleFunctionName: custom-resource-variables-example-dev
    test:
      exampleFunctionName: custom-resource-variables-example-test
    prod:
      exampleFunctionName: custom-resource-variables-example

Resources:
  # Definition of the custom resource
  Variables:
    Type: Custom::EchoUtility
    Properties:
      ServiceToken: !Ref echoUtilityFunctionArn
      ServiceTimeout: 10
      # static variable value
      handlerIndexFile: index
      # map based variable value
      exampleFunctionName:
        !FindInMap [SuffixMap, !Ref environment, exampleFunctionName]
      # composed variable value
      powertoolsLayer: !Sub "arn:aws:lambda:${AWS::Region}:017000801446:layer:${powertoolsNameVersion}"

  CustomResourceVariablesExampleFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Usage
      FunctionName: !GetAtt Variables.exampleFunctionName
      Handler: !Sub "${Variables.handlerIndexFile}.handler"
      # Usage
      InlineCode: |
        from aws_lambda_powertools import Logger
        logger = Logger()
        def handler(event, context):
          logger.info("Hello custom resource variables!")
      Runtime: python3.9
      Architectures:
        - arm64
      Policies:
        - AWSLambdaExecute
      # Usage
      Layers:
        - !GetAtt Variables.powertoolsLayer
